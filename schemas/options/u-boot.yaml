# SPDX-License-Identifier: (GPL-2.0 OR BSD-2-Clause)
# Copyright 2021 Google LLC

%YAML 1.2
---
$id: http://devicetree.org/schemas/options/u-boot.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: U-Boot configuration node

maintainers:
  - Simon Glass <sjg@chromium.org>

description: |
  The u-boot,config node provides basic configuration information to U-Boot,
  for use during its execution. It can be used to control U-Boot's behaviour
  in various ways.

properties:
  $nodename:
    const: u-boot

  compatible:
    const: u-boot,config

  bootcmd:
    $ref: /schemas/types.yaml#/definitions/string
    description: |
      Allows overwriting of the boot command used by U-Boot on startup. If
      present, U-Boot uses this command instead. Note that this feature can
      work even if loading the environment is disabled, e.g. for security
      reasons. See also bootsecure.

  bootdelay-sec:
    description: |
      Allows selecting of the U-Boot bootdelay, to control whether U-Boot
      waits on boot or for how long. This allows this option to be configured
      by the build system or by a previous-stage binary. For example, if the
      images is being packed for testing or a user holds down a button, it may
      allow a delay, but disable it for production.

      If this property is not present, a default value is used instead.

      Note that this uses the 'sec' property unit, even though it allows a
      negative value.

      Values:

      -1: no bootdelay and the user cannot interrupt boot
      0: no bootdelay but use user can still interrupt boot by holding down a
        key, if enabled
      >= 1: delay for this many seconds


  bootsecure:
    $ref: /schemas/types.yaml#/definitions/uint32
    default: 0
    maximum: 2
    description: |
      Controls the execution of the boot command in U-Boot, e.g. selecting
      between using a special function to run commands, or the normal CLI. This
      can be used in production images, to restrict the amount of parsing done
      or the options available, to cut back on the available surface for
      security attacks.

      Values:

      0: normal boot using CLI (default if not present)
      1: use secure boot mechanism instead to parse and run commands
        other values are reserved for future use
      2: use simplified command line (e.g. avoid hush)
      3... reserved

  load-environment:
    $ref: /schemas/types.yaml#/definitions/uint32
    default: 1
    maximum: 1
    description: |
      This allows control over whether U-Boot loads its environment after
      relocation. This normally happens automatically, but can pose a security
      risk, so disabling it in certain situations is useful.

      Note: This could be a boolean. It is defined as an integer since that
      allows changing the value without resizing the devicetree. I'm not sure
      how ugly that is, but IMO the fact that 'false' boolean values are
      represented by being missing is a bit of a pain. One must either add or
      delete the property.

      Values:

      0: don't load the environment
      1: do load the environment

  no-apm-final:
    $ref: /schemas/types.yaml#/definitions/flag
    description: |
      For devices running on coreboot, this tells U-Boot not to lock down the
      Intel Management Engine (ME) registers. This allows U-Boot to access the
      hardware more fully for platforms that need it.

      Absence of this property indicates that the ME registers should be locked
      down as part of U-Boot's start-up sequence and before the command line is
      available.

  silent-console:
    $ref: /schemas/types.yaml#/definitions/uint32
    default: 0
    maximum: 2
    description: |
      This allows the console to be silenced by default on boot. This can allow
      easy disabling of console output on a production build, for example. When
      suppressed, the console is still active. This feature only suppresses the
      console output itself, on all output devices.

      Values:

      0: console output appears as normal (default)
      1: console output is suppressed but console recording still operates (if
        enabled)
      2: console output is suppressed and not recorded

  spl-payload-offset:
    $ref: /schemas/types.yaml#/definitions/uint32
    default: 0
    description: |
      If present (and SPL is controlled by the devicetree), this allows the
      offset of the SPL payload (typically U-Boot) to be specified. The offset
      is in bytes from the start of the media (typically SPI flash).

      Note: This is quite widely used in U-Boot, but since v2018.01 it is
      possible to use Binman instead, to provide this offset (and various
      others) to SPL, or even to U-Boot proper. So far I have not tried sending
      the Binman bindings upstream, but perhaps that should be done instead.

      See here for details:

      https://u-boot.readthedocs.io/en/latest/develop/package/binman.html#image-description-format

required:
  - compatible

additionalProperties: false

examples:
  - |
    options {
      u-boot {
        compatible = "u-boot,config";
        bootcmd = "vboot go auto";
        bootdelay-sec = <(-1)>;
        bootsecure = <1>;
        load-environment = <0>;
        no-apm-final;
        silent-console = <1>;
        spl-payload-offset = <0x40000>;   /* 256K */
      };
    };
